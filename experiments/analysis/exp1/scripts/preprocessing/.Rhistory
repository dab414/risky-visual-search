return(30 / mins_per_trial)
}
print(paste0('Target trials to be 30 min: ', round(desired_trials(avg_runtime))))
## rt distribution
d %>%
filter(subject %in% sample(unique(d$subject, 10))) %>%
ggplot(aes(x = search_rt)) +
geom_histogram() +
facet_wrap(~subject, scales = 'free') +
labs(
caption = 'A randomly-sampled ten participants'
)
## calc proportion dropped
proportion_dropped <- function(rows_before, rows_now) {
return((rows_before - rows_now) / rows_before)
}
## gross rt threshold
rows_before <- nrow(d)
d <- d[d$search_rt < 20000,]
trim_summary <- data.frame(reason = 'Search RTs above 20s', proportion_trimmed = proportion_dropped(rows_before, nrow(d)))
rows_before <- nrow(d)
d <- d[d$choice_rt < 20000,]
trim_summary <- rbind(trim_summary, data.frame(reason = 'Choice RTs above 20s', proportion_trimmed = proportion_dropped(rows_before, nrow(d))))
d %>%
group_by(subject) %>%
summarize(accuracy = 1 - mean(error), rt = mean(search_rt)) %>%
ggplot(aes(x = rt/1000, y = accuracy, group = subject)) +
geom_hline(yintercept = .75, linetype = 'dotted') +
geom_point() +
labs(
x = ' Average Response Time (s)',
y = 'Average Accuracy'
) +
theme_bw()
sample(unique(d$subject),10)
nrow(d)
## rt distribution
d %>%
filter(subject %in% sample(unique(d$subject, 10))) %>%
nrow()
## rt distribution
d %>%
filter(subject %in% sample(unique(d$subject), 10)) %>%
nrow()
## rt distribution
d %>%
filter(subject %in% sample(unique(d$subject), 10)) %>%
ggplot(aes(x = search_rt)) +
geom_histogram() +
facet_wrap(~subject, scales = 'free') +
labs(
caption = 'A randomly-sampled ten participants'
)
## rt distribution
d %>%
filter(subject %in% sample(unique(d$subject), 10)) %>%
ggplot(aes(x = search_rt)) +
geom_histogram() +
facet_wrap(~subject, scales = 'free') +
labs(
caption = 'A randomly-sampled ten participants'
)
## calc proportion dropped
proportion_dropped <- function(rows_before, rows_now) {
return((rows_before - rows_now) / rows_before)
}
## gross rt threshold
rows_before <- nrow(d)
d <- d[d$search_rt < 20000,]
trim_summary <- data.frame(reason = 'Search RTs above 20s', proportion_trimmed = proportion_dropped(rows_before, nrow(d)))
rows_before <- nrow(d)
d <- d[d$choice_rt < 20000,]
trim_summary <- rbind(trim_summary, data.frame(reason = 'Choice RTs above 20s', proportion_trimmed = proportion_dropped(rows_before, nrow(d))))
d %>%
group_by(subject) %>%
summarize(accuracy = 1 - mean(error), rt = mean(search_rt)) %>%
ggplot(aes(x = rt/1000, y = accuracy, group = subject)) +
geom_hline(yintercept = .75, linetype = 'dotted') +
geom_point() +
labs(
x = ' Average Response Time (s)',
y = 'Average Accuracy'
) +
theme_bw()
d %>%
group_by(subject) %>%
summarize(accuracy = 1 - mean(error), rt = mean(search_rt)) %>%
ggplot(aes(x = rt/1000, y = accuracy, group = subject)) +
geom_hline(yintercept = .75, linetype = 'dotted') +
geom_vline(xintercept = 300, linetypw = 'dotted') +
geom_point() +
labs(
x = ' Average Response Time (s)',
y = 'Average Accuracy'
) +
theme_bw()
d %>%
group_by(subject) %>%
summarize(accuracy = 1 - mean(error), rt = mean(search_rt)) %>%
ggplot(aes(x = rt/1000, y = accuracy, group = subject)) +
geom_hline(yintercept = .75, linetype = 'dotted') +
geom_vline(xintercept = .03, linetypw = 'dotted') +
geom_point() +
labs(
x = ' Average Response Time (s)',
y = 'Average Accuracy'
) +
theme_bw()
d %>%
group_by(subject) %>%
summarize(accuracy = 1 - mean(error), rt = mean(search_rt)) %>%
ggplot(aes(x = rt/1000, y = accuracy, group = subject)) +
geom_hline(yintercept = .75, linetype = 'dotted') +
geom_vline(xintercept = .03, linetype = 'dotted') +
geom_point() +
labs(
x = ' Average Response Time (s)',
y = 'Average Accuracy'
) +
theme_bw()
## cut subjects under 75% accuracy
bad_subjects <- d %>%
group_by(subject) %>%
summarize(error = mean(error), rt = mean(search_rt)) %>%
filter(error > .25 | rt < .03) %>%
select(subject)
n_bad_subjects <- nrow(bad_subjects)
d <- d[!(d$subject %in% bad_subjects$subject),]
n_bad_subjects
head(d)
d$selected_deck_location_num <- ifelse(d$selected_deck_location == 'right', 1, -1)
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = sdln)) +
geom_point() +
coord_flip()
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_point() +
coord_flip()
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_point() +
coord_flip() +
labs(
x = 'Location Bias'
)
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_point() +
coord_flip() +
labs(
x = '',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.x = element_blank())
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_point() +
coord_flip() +
labs(
x = '',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.)
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_point() +
coord_flip() +
labs(
x = '',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.y = element_blank())
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_point() +
coord_flip() +
labs(
x = 'Subject',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.y = element_blank())
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_hline(yintercept = .9) +
geom_point() +
coord_flip() +
labs(
x = 'Subject',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_hline(yintercept = .9, linetype = 'dotted') +
geom_point() +
coord_flip() +
ylim(0,1) +
labs(
x = 'Subject',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
print(paste0('Proportion dropped: ', round(proportion_dropped(rows_before, nrow(d)), 3), ', ', rows_before - nrow(d), '/', nrow(d)))
1829/10703
head(d)
nrow(d[d$subject=='07iuiut1t9rh',])
rows_before <- nrow(d)
d <- d %>%
group_by(subject) %>%
summarize(choice_rt_m = mean(choice_rt), choice_rt_sd = sd(choice_rt)) %>%
inner_join(d) %>%
filter(choice_rt >= choice_rt_m - (2*choice_rt_sd) & choice_rt <= choice_rt_m + (2*choice_rt_sd))
print(paste0('Proportion dropped: ', round(proportion_dropped(rows_before, nrow(d)), 3), ', ', rows_before - nrow(d), '/', nrow(d)))
write.csv(d, '../../data/exp1_main.csv', row.names = FALSE)
q()
q()
library(tidyverse)
d <- read.csv('../../data/exp1_main_raw.csv')
N <- length(unique(d$subject))
head(d)
d %>%
group_by(subject) %>%
summarize(runtime = max(phase_runtime_mins)) %>%
ggplot(aes(x = reorder(subject, runtime), y = runtime)) +
geom_bar(stat = 'identity') +
geom_hline(yintercept = 30, linetype = 'dashed') +
labs(
x = 'Subject',
y = 'Main Phase Runtime (mins)'
) +
theme(axis.text.x = element_blank())
runtimes <- d %>%
group_by(subject) %>%
summarize(runtime = max(phase_runtime_mins))
avg_runtime <- mean(runtimes[runtimes$runtime < 60,]$runtime)
desired_trials <- function(avg_runtime, n_trials = 308) {
mins_per_trial <- avg_runtime / n_trials
return(30 / mins_per_trial)
}
print(paste0('Target trials to be 30 min: ', round(desired_trials(avg_runtime))))
## make a model that coverts a summary of choice rt to overall mins
hist(d$choice_rt)
## make a model that coverts a summary of choice rt to overall mins
hist(d[d$choice_rt < 20000,]$choice_rt)
## make a model that coverts a summary of choice rt to overall mins
hist(d[d$choice_rt < 10000,]$choice_rt)
## make a model that coverts a summary of choice rt to overall mins
hist(d[d$choice_rt < 10000,]$choice_rt)
## make a model that coverts a summary of choice rt to overall mins
hist(d$choice_rt)
## make a model that coverts a summary of choice rt to overall mins
nrow(d[d$$choice_rt>500000,])
## make a model that coverts a summary of choice rt to overall mins
nrow(d[d$choice_rt>500000,])
## make a model that coverts a summary of choice rt to overall mins
nrow(d[d$choice_rt>50000,])
## make a model that coverts a summary of choice rt to overall mins
nrow(d[d$choice_rt>20000,])
nrow(d)
hist(d$choice_rt)
## make a model that coverts a summary of choice rt to overall mins
d <- d[d$choice_rt < 20000,]
hist(d$choice_rt)
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text(data = percentile, aes(x = values - 1, label = values), y = 3000) +
geom_histogram()
## make a model that coverts a summary of choice rt to overall mins
d <- d[d$choice_rt < 20000,]
percentile <- quantile(d$choice_rt, c(.75,.85,.95))
percentile <- data.frame(percent = names(percentile), values = percentile)
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text(data = percentile, aes(x = values - 1, label = values), y = 3000) +
geom_histogram()
## make a model that coverts a summary of choice rt to overall mins
d <- d[d$choice_rt < 10000,]
percentile <- quantile(d$choice_rt, c(.75,.85,.95))
percentile <- data.frame(percent = names(percentile), values = percentile)
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text(data = percentile, aes(x = values - 1, label = values), y = 3000) +
geom_histogram()
## make a model that coverts a summary of choice rt to overall mins
d <- d[d$choice_rt < 75000,]
percentile <- quantile(d$choice_rt, c(.75,.85,.95))
percentile <- data.frame(percent = names(percentile), values = percentile)
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text(data = percentile, aes(x = values - 1, label = values), y = 3000) +
geom_histogram()
## make a model that coverts a summary of choice rt to overall mins
d <- d[d$choice_rt < 7500,]
percentile <- quantile(d$choice_rt, c(.75,.85,.95))
percentile <- data.frame(percent = names(percentile), values = percentile)
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text(data = percentile, aes(x = values - 1, label = values), y = 3000) +
geom_histogram()
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text(data = percentile, aes(x = values - 1, label = percent), y = 3000) +
geom_histogram()
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text_repel(data = percentile, aes(x = values - 1, label = percent), y = 3000) +
geom_histogram()
library(ggrepel)
d %>%
ggplot(aes(x = choice_rt)) +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text_repel(data = percentile, aes(x = values - 1, label = percent), y = 3000) +
geom_histogram()
d %>%
ggplot(aes(x = choice_rt)) +
geom_histogram() +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text_repel(data = percentile, aes(x = values - 1, label = percent), y = 3000)
d %>%
ggplot(aes(x = choice_rt)) +
geom_histogram() +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text_repel(data = percentile, aes(x = values - 1, label = percent), y = 3000) +
labs(
x = 'Choice RT (ms)',
y = 'Frequency'
) +
theme_bw()
library(tidyverse)
d <- read.csv('../../data/exp1_main_raw.csv')
N <- length(unique(d$subject))
head(d)
d %>%
group_by(subject) %>%
summarize(runtime = max(phase_runtime_mins)) %>%
ggplot(aes(x = reorder(subject, runtime), y = runtime)) +
geom_bar(stat = 'identity') +
geom_hline(yintercept = 30, linetype = 'dashed') +
labs(
x = 'Subject',
y = 'Main Phase Runtime (mins)'
) +
theme(axis.text.x = element_blank())
runtimes <- d %>%
group_by(subject) %>%
summarize(runtime = max(phase_runtime_mins))
avg_runtime <- mean(runtimes[runtimes$runtime < 60,]$runtime)
desired_trials <- function(avg_runtime, n_trials = 308) {
mins_per_trial <- avg_runtime / n_trials
return(30 / mins_per_trial)
}
print(paste0('Target trials to be 30 min: ', round(desired_trials(avg_runtime))))
## rt distribution
d %>%
filter(subject %in% sample(unique(d$subject), 10)) %>%
ggplot(aes(x = search_rt)) +
geom_histogram() +
facet_wrap(~subject, scales = 'free') +
labs(
caption = 'A randomly-sampled ten participants'
)
## calc proportion dropped
proportion_dropped <- function(rows_before, rows_now) {
return((rows_before - rows_now) / rows_before)
}
## gross rt threshold
rows_before <- nrow(d)
d <- d[d$search_rt < 20000,]
trim_summary <- data.frame(reason = 'Search RTs above 20s', proportion_trimmed = proportion_dropped(rows_before, nrow(d)))
rows_before <- nrow(d)
d <- d[d$choice_rt < 20000,]
trim_summary <- rbind(trim_summary, data.frame(reason = 'Choice RTs above 20s', proportion_trimmed = proportion_dropped(rows_before, nrow(d))))
d %>%
group_by(subject) %>%
summarize(accuracy = 1 - mean(error), rt = mean(search_rt)) %>%
ggplot(aes(x = rt/1000, y = accuracy, group = subject)) +
geom_hline(yintercept = .75, linetype = 'dotted') +
geom_vline(xintercept = .03, linetype = 'dotted') +
geom_point() +
labs(
x = ' Average Response Time (s)',
y = 'Average Accuracy'
) +
theme_bw()
d$selected_deck_location_num <- ifelse(d$selected_deck_location == 'right', 1, -1)
d %>%
group_by(subject) %>%
summarize(sdln = mean(selected_deck_location_num)) %>%
ggplot(aes(x = subject, y = abs(sdln))) +
geom_hline(yintercept = .9, linetype = 'dotted') +
geom_point() +
coord_flip() +
ylim(0,1) +
labs(
x = 'Subject',
y = 'Location Bias'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
## cut subjects under 75% accuracy
bad_subjects <- d %>%
group_by(subject) %>%
summarize(error = mean(error), rt = mean(search_rt), location_bias = abs(mean(d$selected_deck_location_num))) %>%
filter(error > .25 | rt < .03 | location_bias > .9) %>%
select(subject)
n_bad_subjects <- nrow(bad_subjects)
d <- d[!(d$subject %in% bad_subjects$subject),]
## remove choice rts beyond
hist(d$choice_rt)
rows_before <- nrow(d)
d <- d[d$choice_rt > 300 & d$choice_rt < 10000,]
print(paste0('Proportion dropped: ', round(proportion_dropped(rows_before, nrow(d)), 3), ', ', rows_before - nrow(d), '/', nrow(d)))
rows_before <- nrow(d)
d <- d %>%
group_by(subject) %>%
summarize(choice_rt_m = mean(choice_rt), choice_rt_sd = sd(choice_rt)) %>%
inner_join(d) %>%
filter(choice_rt >= choice_rt_m - (2*choice_rt_sd) & choice_rt <= choice_rt_m + (2*choice_rt_sd))
print(paste0('Proportion dropped: ', round(proportion_dropped(rows_before, nrow(d)), 3), ', ', rows_before - nrow(d), '/', nrow(d)))
write.csv(d, '../../data/exp1_main.csv', row.names = FALSE)
percentile <- quantile(d$choice_rt, c(.75,.85,.95))
percentile
m1 <- lm(phase_runtime_mins ~ choice_rt, data = d)
summary(m1)
d %>%
group_by(subject) %>%
summarize(choice_rt = mean(choice_rt), phase_runtime_mins = mean(phase_runtime_mins)) %>%
ggplot(aes(x = choice_rt, y = phase_runtime_mins)) +
geom_point() +
geom_smooth(method = 'lm')
m <- d %>%
group_by(subject) %>%
summarize(choice_rt = mean(choice_rt), phase_runtime_mins = mean(phase_runtime_mins))
d <- d %>%
mutate(choice_rt_c = (choice_rt - choice_rt_m) / choice_rt_sd)
m1 <- lm(phase_runtime_mins ~ choice_rt_c, data = d)
summary(m1)
plot(d$choice_rt, d$phase_runtime_mins)
m <- d %>%
group_by(subject) %>%
summarize(choice_rt_c = mean(choice_rt_c), phase_runtime_mins = max(phase_runtime_mins))
m2 <- lm(phase_runtime_mins ~ choice_rt, )
m2 <- lm(phase_runtime_mins ~ choice_rt, data = m)
m2 <- lm(phase_runtime_mins ~ choice_rt_c, data = m)
summary(m2)
d %>%
ggplot(aes(x = choice_rt)) +
geom_histogram() +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text_repel(data = percentile, aes(x = values - 1, label = percent), y = 3000) +
labs(
x = 'Choice RT (ms)',
y = 'Frequency'
) +
theme_bw()
library(ggrepel)
## make a model that coverts a summary of choice rt to overall mins
d <- d[d$choice_rt < 7500,]
percentile <- quantile(d$choice_rt, c(.75,.85,.95))
percentile <- data.frame(percent = names(percentile), values = percentile)
d %>%
ggplot(aes(x = choice_rt)) +
geom_histogram() +
geom_vline(data = percentile, aes(xintercept = values), linetype = 'dashed') +
geom_text_repel(data = percentile, aes(x = values - 1, label = percent), y = 3000) +
labs(
x = 'Choice RT (ms)',
y = 'Frequency'
) +
theme_bw()
d <- d %>%
mutate(choice_rt_c = (choice_rt - choice_rt_m) / choice_rt_sd)
m1 <- lm(phase_runtime_mins ~ choice_rt_c, data = d)
summary(m1)
q()
q()
